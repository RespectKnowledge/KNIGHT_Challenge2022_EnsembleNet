# -*- coding: utf-8 -*-
"""knights_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iV_TB2CYTAYsU9K7nKIk8wzg2TMcYSOW
"""

#%%
#testing features
import json
original_file='C:\\Users\\Administrateur\\Desktop\\testfused_model\\knight_test_data\\knight_test_data\\features.json'

#%%



# from google.colab import drive
# drive.mount('/content/drive')

# cd /content/drive/MyDrive/

original_file='/content/drive/MyDrive/knight_challenegs2022/knight.json'
import json
# with open(original_file) as f:
#         clinical_data = json.load(f)

# pack_years=[]
# for index, patient in enumerate(clinical_data):
#   pack_years=patient['pack_years']
#   pack_years.append(pack_years)

# clinical_data

# CLINICAL_NAMES = ['SubjectId', 'age', 'bmi', 'gender', 
#                   'gender_num', 'comorbidities', 
#                   'smoking_history', 
#                   'radiographic_size', 
#                   'preop_egfr',
#                   'pathology_t_stage', 
#                   'pathology_n_stage', 
#                   'pathology_m_stage',
#                   'age_when_quit_smoking',
#                   'alcohol_use',
#                   'chewing_tobacco_use',
#                   'pack_years', 
#                   'grade', 
#                   'aua_risk_group', 'task_1_label', 'task_2_label']

import os
import json
import pandas as pd
import numpy as np

#CLINICAL_NAMES = ['SubjectId', 'age', 'bmi', 'gender', 'gender_num', 'comorbidities', 'smoking_history', 'radiographic_size', 'preop_egfr',
                  #'pathology_t_stage', 'pathology_n_stage', 'pathology_m_stage','age_when_quit_smoking','pack_years', 'grade', 'aua_risk_group', 'task_1_label', 'task_2_label']



CLINICAL_NAMES = ['SubjectId', 'age', 'bmi', 'gender', 
                  'gender_num', 'comorbidities', 
                  'smoking_history', 
                  'radiographic_size', 
                  'preop_egfr',
                  'pathology_t_stage', 
                  'pathology_n_stage', 
                  'pathology_m_stage',
                  'age_when_quit_smoking',
                  'alcohol_use',
                  'chewing_tobacco_use',
                  'pack_years', 
                  'grade', 
                  'aua_risk_group', 'task_1_label', 'task_2_label']

# "age_at_nephrectomy"
# "gender"
# "body_mass_index"
# "comorbidities"
# "smoking_history"
# "age_when_quit_smoking"
# "pack_years"
# "chewing_tobacco_use"
# "alcohol_use"
# "last_preop_egfr"
# "radiographic_size"
# "voxel_spacing"


def create_knight_clinical(original_file, processed_file=None):
    with open(original_file) as f:
        clinical_data = json.load(f)
    t_stage_count = np.zeros((5))
    aua_risk_count = np.zeros((5))
    df = pd.DataFrame(columns=CLINICAL_NAMES)
    for index, patient in enumerate(clinical_data):
        df.loc[index, 'SubjectId'] = patient['case_id']
        df.loc[index, 'age'] = patient['age_at_nephrectomy']
        df.loc[index, 'bmi'] = patient['body_mass_index']

        df.loc[index, 'gender'] = patient['gender']
        if patient['gender'] == 'male':    # 0:'male'  1:'female','transgender_male_to_female'
            df.loc[index, 'gender_num'] = 0
        else:
            df.loc[index, 'gender_num'] = 1

        df.loc[index, 'comorbidities'] = 0    # 0:no_comorbidities 1:comorbidities_exist
        for key, value in patient['comorbidities'].items():
            if value:
                df.loc[index, 'comorbidities'] = 1

        df.loc[index, 'smoking_history'] = patient['smoking_history']
        if patient['smoking_history']=='never_smoked':    # 0:'never_smoked' 1:'previous_smoker'  2:'current_smoker'
            df.loc[index, 'smoking_history'] = 0
        elif patient['smoking_history'] == 'previous_smoker':
            df.loc[index, 'smoking_history'] = 1
        elif patient['smoking_history'] == 'current_smoker':
            df.loc[index, 'smoking_history'] = 2

        df.loc[index, 'radiographic_size'] = patient['radiographic_size']
        if patient['last_preop_egfr']['value'] == '>=90':
            df.loc[index, 'preop_egfr'] = 90
        else:
            df.loc[index, 'preop_egfr'] = patient['last_preop_egfr']['value']

        df.loc[index, 'pathology_t_stage'] = patient['pathology_t_stage']
        df.loc[index, 'pathology_n_stage'] = patient['pathology_n_stage']
        df.loc[index, 'pathology_m_stage'] = patient['pathology_m_stage']
        df.loc[index, 'aua_risk_group'] = patient['aua_risk_group']
       
        # Task 1 labels:
        if patient['aua_risk_group'] in ['high_risk', 'very_high_risk']:    # 1:'3','4'  0:'0','1a','1b','2a','2b'
            df.loc[index, 'task_1_label'] = 1 # CanAT
        else:
            df.loc[index, 'task_1_label'] = 0 # NoAT

        # Task 2 labels:
        if patient['aua_risk_group']=='benign':
            df.loc[index, 'task_2_label'] = 0 
        elif patient['aua_risk_group']=='low_risk':
            df.loc[index, 'task_2_label'] = 1
        elif  patient['aua_risk_group']=='intermediate_risk':
            df.loc[index, 'task_2_label'] = 2
        elif patient['aua_risk_group']=='high_risk':
            df.loc[index, 'task_2_label'] = 3
        elif patient['aua_risk_group']=='very_high_risk':
            df.loc[index, 'task_2_label'] = 4
        else:
            ValueError('Wrong risk class')

        # former classification - deprecated
        #if patient['pathology_t_stage'] in ['3', '4']:    # 1:'3','4'  0:'0','1a','1b','2a','2b'
        #    df.loc[index, 'pathology_t_stage_classify'] = 1
        #else:
        #    df.loc[index, 'pathology_t_stage_classify'] = 0
        t_stage = int(patient['pathology_t_stage'][0])
        t_stage_count[t_stage] += 1
        aua_risk = int(df.loc[index, 'task_2_label'])
        aua_risk_count[aua_risk] += 1
        df.loc[index, 'grade'] = patient['tumor_isup_grade']
        ##### new parameters
        df.loc[index,'alcohol_use']=patient['alcohol_use']
        df.loc[index,'pack_years']=patient['pack_years']
        df.loc[index,'age_when_quit_smoking']=patient['age_when_quit_smoking']
        df.loc[index,'achewing_tobacco_use']=patient['chewing_tobacco_use']
        #age_when_quit_smoking

    if processed_file is not None:
        # save csv file
        df.to_csv(processed_file, index=False)
        df = df.drop(['gender', 'pathology_t_stage', 'pathology_n_stage', 'pathology_m_stage'], axis=1)
        df.to_csv(os.path.splitext(processed_file)[0] + '_numeric.csv' , index=False)
    print(f'Pathology t-stage count summary: {t_stage_count}')
    print(f'AUA risk count summary: {aua_risk_count}')
    return df

#original_file='C:\\Users\\Administrateur\\Desktop\\testfused_model\\knight.json'
original_file='/content/drive/MyDrive/knight_challenegs2022/knight.json'
df=create_knight_clinical(original_file, processed_file=None)
#df.to_csv('processed_file.csv', index=False)

#preop_egfr
df['preop_egfr'].unique()

df['preop_egfr']=df['preop_egfr'].fillna(4)

df['preop_egfr'].unique()

df['radiographic_size'].unique()

df['radiographic_size'].unique()

df

df['alcohol_use'].unique()
#two_or_less_daily
#never_or_not_in_last_3mo
#more_than_two_daily

df['pack_years'].unique()
#None

df['pack_years'].unique()
#None

df['chewing_tobacco_use'].unique()

df['age_when_quit_smoking'].unique()
#not_applicable
#None

df['age_when_quit_smoking'] = df['age_when_quit_smoking'].fillna(0)

df['age_when_quit_smoking'].unique()



#### grouping of subcategories

clinical_outcome["Tstage"] = clinical_outcome["Tstage"].map({'T1': 1, 
                                                                 'T2': 2,
                                                                 'T3': 3,
                                                                 'T4a': 4,
                                                                 'T4': 4,
                                                                 'T4b': 4,
                                                                 'Tx': 5}) # map one labe with label 1 and 2 label with zero
#print(clinical_outcome["Nstage"].values)
    
clinical_outcome["Nstage"] = clinical_outcome["Nstage"].map({'N1': 1, 
                                                                 'N2': 2,
                                                                 'N2a': 2,
                                                                 'N2b': 2,
                                                                 'N2c': 2,
                                                                 'N3': 4,
                                                                 'N0': 0,}) # map one labe with label 1 and 2 label with zero
 
clinical_outcome["Mstage"] = clinical_outcome["Mstage"].map({'M0': 0, 
                                                                 'M1': 1,})


clinical_outcome["TNMgroup"] = clinical_outcome["TNMgroup"].map({'I': 0, 
                                                                 'II': 1,
                                                                 'III':2,
                                                                 'IVB':3,
                                                                 'IVA':3,
                                                                 'IVC':3,
                                                                 'IV':4})

import numpy as np
from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.linear_model import LinearRegression

lr = LinearRegression()
imp = IterativeImputer(estimator=lr,missing_values=np.nan, max_iter=10, verbose=2, imputation_order='roman',random_state=0)

clinical_imputed=imp.fit_transform(clinical_outcome.drop(columns=['PatientID']))
clinical_imputed = pd.DataFrame(clinical_imputed, columns = clinical_outcome.drop(columns=['PatientID']).columns)



import pandas as pd
#path='C:\\Users\\Administrateur\\Desktop\\testfused_model\\fuse-med-ml-master\\fuse-med-ml-master\\baseline'
splits=pd.read_pickle('/content/drive/MyDrive/knight_challenegs2022/splits_final.pkl')
# For this example, we use split 0 out of the 5 available cross validation splits
split = splits[0]

dfval=pd.DataFrame(split['val'])

dfval

df

df['chewing_tobacco_use']

#%%
import torch
import pandas as pd
from torch.utils.data import Dataset
from torch.utils.data import DataLoader
import os
import SimpleITK as sitk


class deeeeset(Dataset):
    def __init__(self,in_out,images):
        self.in_out=in_out
        self.images=images
        
        self.ids=self.in_out['SubjectId']
        self.label=self.in_out['task_1_label']
        
        self.feature=self.in_out.drop(['SubjectId','task_1_label','task_2_label'],axis=1, inplace=True)

        
        self.path_img=[]
        
        for i in self.ids:
            pth_i=os.path.join(self.images,i)
            pth_ie=os.path.join(pth_i+'\\imaging.nii.gz')
            self.path_img.append(pth_ie)
            
        
    def __getitem__(self,idx):
        
        feat=file.iloc[idx]
        x_feature=pd.DataFrame(feat).T
        
        x_input=self.path_img[idx]
        read_img=sitk.ReadImage(x_input)
        get_array_img=sitk.GetArrayFromImage(read_img)
        # norm_img=get_array_img
        
        y_output=self.label[idx]
        
        return (get_array_img,x_feature,y_output)
    
    def __len__(self):
        return(len(self.label))
    

file=pd.read_csv('C:\\Users\\Administrateur\\Desktop\\testfused_model\\fuse-med-ml-master\\fuse-med-ml-master\\processed_file.csv')
data='C:\\Users\\Administrateur\\Desktop\\testfused_model\\data'

ob_d=deeeeset(file,data)

i,f, o=ob_d[1]

print(i.shape)
print(o)
print(f)

path='C:\\Users\\Administrateur\\Desktop\\testfused_model\\clinical_dataknight.csv'

pathfile=pd.read_csv(path)

pathp='C:\\Users\\Administrateur\\Desktop\\testfused_model'

#datafile=pd.load(pathp)

import pandas as pd
#path='C:\\Users\\Administrateur\\Desktop\\testfused_model\\fuse-med-ml-master\\fuse-med-ml-master\\baseline'
splits=pd.read_pickle(os.path.join(pathp,'splits_final.pkl'))
# For this example, we use split 0 out of the 5 available cross validation splits
split = splits[0]
train=split['train']
pdftrain=pd.DataFrame(train).rename(columns={0:'SubjectId'})


val=split['val']
pdfval=pd.DataFrame(val).rename(columns={0:'SubjectId'})


#data_dir='C:\\Users\\Administrateur\\Desktop\\testfused_model'
#train_data_source = FuseDataSourceDefault(list(split['train']))
# name=pdftrain['SubjectId']
# imageurlc1=pathfile.loc[pathfile['SubjectId']==name]
# data1=[]
# for i in name:
#     print(i)
#     data=pathfile.loc[pathfile['SubjectId']==i]
#     print(data)
#     data1.append(data)
# import numpy as np
# data2=np.array(data1)
# data3=np.squeeze(data2,axis=1)
# traindata=pd.DataFrame(data3)

traindatapd = pd.merge(pathfile, pdftrain, on=['SubjectId'], how='inner')
traindatapd .head()

valdatapd = pd.merge(pathfile, pdfval, on=['SubjectId'], how='inner')
valdatapd.head()

valdatapd.to_csv('validfold0.csv',index=False)
traindatapd.to_csv('trainfold0.csv',index=False)
    



